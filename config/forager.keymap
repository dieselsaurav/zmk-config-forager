#define ZMK_POINTING_DEFAULT_MOVE_VAL 1000  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 15    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3

/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

/ {
    behaviors {
        thumb_ht: thumb_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
            hold-trigger-key-positions = <0 1 2 3 4 14 10 11 12 13 14 20 21 22 23 24 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>;
        };

        hml: left_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>;
            hold-trigger-on-release;
        };

        hmr: right_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
            hold-trigger-on-release;
        };

        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            require-prior-idle-ms = <100>;
        };

        hml_fast: left_homerow_mods_fast {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <80>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>;
            hold-trigger-on-release;
            label = "HML_FAST";
        };

        hmr_fast: right_homerow_mods_fast {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <80>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
            hold-trigger-on-release;
            label = "HMR_FAST";
        };
    };

    macros {
        thin_arrow: thin_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "THIN_ARROW";
        };

        thick_arrow: thick_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GREATER_THAN>;
            label = "THICK_ARROW";
        };

        rs_lambda_macro: rs_lambda_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp PIPE &kp PIPE &kp LEFT>;
            label = "RS_LAMBDA_MACRO";
        };
    };

    combos {
        compatible = "zmk,combos";

        arr-right-paren {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <6 7>;
            layers = <1>;
        };

        arr-right-curly {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <7 8>;
            layers = <1>;
        };

        arr-right-square-bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <5 6>;
            layers = <1>;
        };

        def-mcommadot-to-fkeys+s+space {
            bindings = <&lt 3 LG(SPACE)>;
            key-positions = <27 26 28>;
            layers = <0>;
        };

        def-xcv-to-media+del {
            bindings = <&lt 4 DELETE>;
            key-positions = <21 22 23>;
            layers = <0>;
        };

        def-wer-to-system-danger+caps {
            bindings = <&caps_word>;
            key-positions = <1 2 3>;
            layers = <0>;
        };

        num-thin-arr-combo {
            bindings = <&thin_arrow>;
            key-positions = <1 2>;
            layers = <2>;
        };

        num-thick-arrow-combo {
            bindings = <&thick_arrow>;
            key-positions = <2 3>;
            layers = <2>;
        };

        arr-rust-lambda {
            bindings = <&rs_lambda_macro>;
            key-positions = <25 26>;
            layers = <1>;
        };

        def-jkl-hyper-space {
            bindings = <&kp LS(LA(LC(LG(SPACE))))>;
            key-positions = <16 17 18>;
            layers = <0>;
        };

        copy_shortcut {
            bindings = <&kp LG(C)>;
            key-positions = <21 22>;
        };

        def-sdf-to-tab {
            bindings = <&kp TAB>;
            key-positions = <11 12 13>;
            layers = <0>;
        };

        num-sdf-to-equal {
            bindings = <&kp EQUAL>;
            key-positions = <11 12 13>;
            layers = <2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "DEF";
            bindings = <
  &kp Q         &kp W            &kp E            &kp R                   &kp T                                    &kp Y                                 &kp U                    &kp I            &kp O            &kp P
  &hml LCTRL A  &hml LEFT_ALT S  &hml LEFT_GUI D  &hml_fast LEFT_SHIFT F  &kp G                                    &kp H                                 &hmr_fast RIGHT_SHIFT J  &hmr LEFT_GUI K  &hmr LEFT_ALT L  &hmr RIGHT_CONTROL SEMICOLON
  &kp Z         &kp X            &kp C            &kp V                   &kp B                                    &kp N                                 &kp M                    &kp COMMA        &kp DOT          &as LS(SLASH) SLASH
                                                  &lt 1 BACKSPACE         &thumb_ht LS(LA(LC(LEFT_GUI))) ESCAPE    &thumb_ht LS(LA(LEFT_CONTROL)) ENTER  &lt 2 SPACE
            >;
        };

        arrows+braces {
            bindings = <
  &kp BACKSLASH           &kp HASH    &kp DOUBLE_QUOTES  &trans     &trans    &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS  &kp LEFT_BRACE  &kp RIGHT_BRACKET  &kp BACKSLASH
  &hml LCTRL EXCLAMATION  &kp LALT    &kp LGUI           &kp LSHFT  &trans    &kp LEFT          &kp DOWN              &kp UP          &kp RIGHT          &kp APOSTROPHE
  &kp CARET               &kp DOLLAR  &kp AT             &trans     &trans    &kp PIPE          &kp COLON             &kp LESS_THAN   &kp GREATER_THAN   &kp GRAVE
                                                         &trans     &trans    &trans            &kp DOUBLE_QUOTES
            >;
        };

        numbers+symbols {
            bindings = <
  &kp PLUS                 &kp NUMBER_4            &kp N5                      &kp NUMBER_6              &kp STAR           &trans  &trans                         &trans                            &kp PERCENT              &trans
  &hml LEFT_CONTROL MINUS  &hml LEFT_ALT NUMBER_1  &hml LEFT_COMMAND NUMBER_2  &hml LEFT_SHIFT NUMBER_3  &kp EQUAL          &trans  &hmr RIGHT_SHIFT LEFT_BRACKET  &hmr RIGHT_COMMAND RIGHT_BRACKET  &hmr LEFT_ALT AMPERSAND  &kp RIGHT_CONTROL
  &kp UNDERSCORE           &kp NUMBER_7            &kp NUMBER_8                &kp NUMBER_9              &kp EXCLAMATION    &trans  &trans                         &trans                            &trans                   &trans
                                                                               &trans                    &kp NUMBER_0       &trans  &trans
            >;
        };

        funtions-btns-sys {
            bindings = <
  &kp F12  &kp F4  &kp F5  &kp F6  &trans     &sys_reset   &trans        &trans        &trans        &bt BT_CLR
  &kp F11  &kp F1  &kp F2  &kp F3  &trans     &bootloader  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans
  &kp F13  &kp F7  &kp F8  &kp F9  &trans     &kp K_LOCK   &trans        &trans        &trans        &trans
                           &trans  &kp F10    &trans       &trans
            >;
        };

        media_and_mouse {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &msc SCRL_UP    &kp C_VOLUME_UP  &kp K_MUTE        &kp C_VOL_DN     &kp C_BRIGHTNESS_INC
  &trans  &trans  &trans  &trans  &trans    &mmv MOVE_LEFT  &mmv MOVE_DOWN   &mmv MOVE_UP      &mmv MOVE_RIGHT  &kp C_BRIGHTNESS_AUTO
  &trans  &trans  &trans  &trans  &trans    &msc SCRL_DOWN  &kp C_PREV       &kp C_PLAY_PAUSE  &kp C_NEXT       &kp C_BRIGHTNESS_DEC
                          &trans  &trans    &mkp LCLK       &mkp RCLK
            >;
        };

        system_danger {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &sys_reset   &bt BT_DISC 0   &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_CLR
  &trans  &trans  &trans  &trans  &trans    &bootloader  &bt BT_SEL 0    &bt BT_SEL 1   &bt BT_SEL 2   &trans
  &trans  &trans  &trans  &trans  &trans    &soft_off    &trans          &trans         &trans         &bt BT_CLR_ALL
                          &trans  &trans    &trans       &studio_unlock
            >;
        };
    };
};
